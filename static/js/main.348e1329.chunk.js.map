{"version":3,"sources":["AutosomalRecessiveGeneticCalculator.js","App.js","index.js"],"names":["COLORS","getFraction","decimal","h1","h2","k1","k2","b","a","Math","floor","aux","abs","concat","parseFraction","fraction","numerator","denominator","split","map","Number","AutosomalRecessiveGeneticCalculator","inputType","setInputType","useState","parentCarrierProbability","setParentCarrierProbability","parentCarrierFraction","setParentCarrierFraction","outcomes","setOutcomes","normal","carrier","affected","useEffect","calculateOutcomes","p","probabilityBothCarriers","affectedProbability","carrierProbability","handleInputChange","value","data","name","_jsxs","className","children","_jsx","onChange","e","target","type","min","max","placeholder","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","labelLine","outerRadius","fill","dataKey","label","_ref","toFixed","entry","index","Cell","length","Legend","pow","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.348e1329.chunk.js","sourcesContent":["// src/AutosomalRecessiveGeneticCalculator.js\n\nimport React, { useState, useEffect } from 'react';\nimport { PieChart, Pie, Cell, Legend, ResponsiveContainer } from 'recharts';\n\nconst COLORS = ['#4ade80', '#fbbf24', '#f87171'];\n\nconst getFraction = (decimal) => {\n  if (decimal === 0) return '0';\n  if (decimal === 1) return '1';\n  const tolerance = 1.0E-6;\n  let h1 = 1, h2 = 0, k1 = 0, k2 = 1;\n  let b = decimal;\n  do {\n    let a = Math.floor(b);\n    let aux = h1; h1 = a * h1 + h2; h2 = aux;\n    aux = k1; k1 = a * k1 + k2; k2 = aux;\n    b = 1 / (b - a);\n  } while (Math.abs(decimal - h1 / k1) > decimal * tolerance);\n  return `${h1}/${k1}`;\n};\n\nconst parseFraction = (fraction) => {\n  const [numerator, denominator] = fraction.split('/').map(Number);\n  return numerator / denominator;\n};\n\nconst AutosomalRecessiveGeneticCalculator = () => {\n  const [inputType, setInputType] = useState('percentage');\n  const [parentCarrierProbability, setParentCarrierProbability] = useState(25);\n  const [parentCarrierFraction, setParentCarrierFraction] = useState('1/4');\n  const [outcomes, setOutcomes] = useState({ normal: 0, carrier: 0, affected: 0 });\n\n  useEffect(() => {\n    calculateOutcomes();\n  }, [parentCarrierProbability, parentCarrierFraction, inputType]);\n\n  const calculateOutcomes = () => {\n    const p = inputType === 'percentage' ? parentCarrierProbability / 100 : parseFraction(parentCarrierFraction);\n    const q = 1 - p;\n\n    const probabilityBothCarriers = p * p;\n    const probabilityOneCarrier = 2 * p * q;\n\n    const affectedProbability = probabilityBothCarriers * 0.25;\n    const carrierProbability = (probabilityBothCarriers * 0.5) + (probabilityOneCarrier * 0.5);\n    const normalProbability = 1 - affectedProbability - carrierProbability;\n\n    setOutcomes({\n      normal: normalProbability,\n      carrier: carrierProbability,\n      affected: affectedProbability,\n    });\n  };\n\n  const handleInputChange = (value) => {\n    if (inputType === 'percentage') {\n      setParentCarrierProbability(Number(value));\n    } else {\n      setParentCarrierFraction(value);\n    }\n  };\n\n  const data = [\n    { name: 'Normal', value: outcomes.normal },\n    { name: 'Carrier', value: outcomes.carrier },\n    { name: 'Affected', value: outcomes.affected },\n  ];\n\n  return (\n    <div className=\"p-4 bg-blue-100 rounded-lg\">\n      <h2 className=\"text-xl font-bold mb-4\">Autosomal Recessive Genetic Calculator</h2>\n      \n      <div className=\"mb-4\">\n        <label className=\"block mb-2\">Input Type:</label>\n        <select \n          value={inputType} \n          onChange={(e) => setInputType(e.target.value)}\n          className=\"mb-2 p-2 rounded\"\n        >\n          <option value=\"percentage\">Percentage</option>\n          <option value=\"fraction\">Fraction</option>\n        </select>\n        \n        {inputType === 'percentage' ? (\n          <div>\n            <label className=\"block mb-2\">Parent Carrier Probability: {parentCarrierProbability}% (p = {getFraction(parentCarrierProbability/100)})</label>\n            <input \n              type=\"range\" \n              min=\"0\" \n              max=\"100\" \n              value={parentCarrierProbability} \n              onChange={(e) => handleInputChange(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n        ) : (\n          <div>\n            <label className=\"block mb-2\">Parent Carrier Fraction: (p = {parentCarrierFraction})</label>\n            <input \n              type=\"text\" \n              value={parentCarrierFraction} \n              onChange={(e) => handleInputChange(e.target.value)}\n              className=\"w-full p-2 rounded\"\n              placeholder=\"Enter fraction (e.g., 1/4)\"\n            />\n          </div>\n        )}\n      </div>\n\n      <div className=\"mb-4\">\n        <h3 className=\"font-bold\">Outcomes:</h3>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n              label={({ name, value }) => `${name}: ${(value * 100).toFixed(2)}%`}\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n        <p>Normal: {(outcomes.normal * 100).toFixed(2)}% = {getFraction(outcomes.normal)}</p>\n        <p>Carrier: {(outcomes.carrier * 100).toFixed(2)}% = {getFraction(outcomes.carrier)}</p>\n        <p>Affected: {(outcomes.affected * 100).toFixed(2)}% = {getFraction(outcomes.affected)}</p>\n      </div>\n\n      <div className=\"bg-white p-4 rounded-lg\">\n        <h3 className=\"font-bold mb-2\">Calculations and Equations (Autosomal Recessive):</h3>\n        <p>p = probability of parent being a carrier = {inputType === 'percentage' ? getFraction(parentCarrierProbability/100) : parentCarrierFraction}</p>\n        <p>q = probability of parent not being a carrier = 1 - p = {getFraction(1 - (inputType === 'percentage' ? parentCarrierProbability/100 : parseFraction(parentCarrierFraction)))}</p>\n        <p>1. Probability of both parents being carriers: pÂ² = {getFraction(Math.pow(inputType === 'percentage' ? parentCarrierProbability/100 : parseFraction(parentCarrierFraction), 2))}</p>\n        <p>2. Probability of only one parent being a carrier: 2pq = {getFraction(2 * (inputType === 'percentage' ? parentCarrierProbability/100 : parseFraction(parentCarrierFraction)) * (1 - (inputType === 'percentage' ? parentCarrierProbability/100 : parseFraction(parentCarrierFraction))))}</p>\n        <p>3. Probability of no parents being carriers: qÂ² = {getFraction(Math.pow(1 - (inputType === 'percentage' ? parentCarrierProbability/100 : parseFraction(parentCarrierFraction)), 2))}</p>\n        <p>4. Probability of affected child: pÂ² Ã 1/4 = {getFraction(outcomes.affected)}</p>\n        <p>5. Probability of carrier child: (pÂ² Ã 1/2) + (2pq Ã 1/2) = {getFraction(outcomes.carrier)}</p>\n        <p>6. Probability of normal child: 1 - (affected + carrier) = {getFraction(outcomes.normal)}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AutosomalRecessiveGeneticCalculator;\n","// src/App.js\n\nimport React from 'react';\nimport AutosomalRecessiveGeneticCalculator from './AutosomalRecessiveGeneticCalculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AutosomalRecessiveGeneticCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}